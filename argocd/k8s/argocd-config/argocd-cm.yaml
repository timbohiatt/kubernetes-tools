apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  # Argo CD's externally facing base URL (optional). Required when configuring SSO
  #url: https://argocd.example.dev

  # Enables application status badge feature
  #statusbadge.enabled: "false"

  # Override the Argo CD hostname root URL for both the project and the application status badges.
  # Here is an example of the application status badge for the app `myapp` to see what is replaced.
  #    <statusbadge.url>api/badge?name=myapp&revision=true
  # Provide custom URL to override. You must include the trailing forward slash:
  #statusbadge.url: "https://cd-status.apps.argoproj.io/"

  # Enables anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.yaml.
  #users.anonymous.enabled: "false"
  # Specifies token expiration duration
  users.session.duration: "24h"

  # Specifies regex expression for password
  passwordPattern: "^.{8,32}$"

  # Enables google analytics tracking is specified
  #ga.trackingid: "UA-12345-1"
  # Unless set to 'false' then user ids are hashed before sending to google analytics
  #ga.anonymizeusers: "false"

  # the URL for getting chat help, this will typically be your Slack channel for support
  #help.chatUrl: "mailto:some-email@contact.com"
  # the text for getting chat help, defaults to "Chat now!"
  #help.chatText: "Chat now!"
  # The URLs to download additional ArgoCD binaries (besides the Linux with current platform binary included by default)
  # for different OS architectures. If provided, additional download buttons will be displayed on the help page.
  #help.download.linux-amd64: "path-or-url-to-download"
  #help.download.linux-arm64: "path-or-url-to-download"
  #help.download.linux-ppc64le: "path-or-url-to-download"
  #help.download.linux-s390x: "path-or-url-to-download"
  #help.download.darwin-amd64: "path-or-url-to-download"
  #help.download.darwin-arm64: "path-or-url-to-download"
  #help.download.windows-amd64: "path-or-url-to-download"

  # A dex connector configuration (optional). See SSO configuration documentation:
  # https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/sso
  # https://dexidp.io/docs/connectors/
  # dex.config: |
  #   connectors:
  #     # GitHub example
  #     - type: github
  #       id: github
  #       name: GitHub
  #       config:
  #         clientID: aabbccddeeff00112233
  #         clientSecret: $dex.github.clientSecret
  #         orgs:
  #         - name: your-github-org
  #           teams:
  #           - red-team
  #   # It is possible to provide custom static client for dex if you want to reuse it
  #   # with other services
  #   # staticClients:
  #   # - id: argo-workflow
  #   #   name: Argo Workflow
  #   #   redirectURIs:
  #   #     - https://argo/oauth2/callback
  #   #   secret: $secretReference

  # OIDC configuration as an alternative to dex (optional).
  # oidc.config: |
  #   name: Okta
  #   issuer: https://dev-123456.oktapreview.com
  #   clientID: aaaabbbbccccddddeee
  #   clientSecret: $oidc.okta.clientSecret
  #   # Optional set of OIDC scopes to request. If omitted, defaults to: ["openid", "profile", "email", "groups"]
  #   requestedScopes: ["openid", "profile", "email"]
  #   # Optional set of OIDC claims to request on the ID token.
  #   requestedIDTokenClaims: {"groups": {"essential": true}}

  # Configuration to customize resource behavior (optional) can be configured via splitted sub keys.
  # Keys are in the form: resource.customizations.ignoreDifferences.<group_kind>, resource.customizations.health.<group_kind>
  # resource.customizations.actions.<group_kind>, resource.customizations.knownTypeFields.<group-kind>
  #resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
  #  jsonPointers:
  #  - /webhooks/0/clientConfig/caBundle
  #  jqPathExpressions:
  #  - .webhooks[0].clientConfig.caBundle
  #  managedFieldsManagers:
  #  - kube-controller-manager

  # Configuration to define customizations ignoring differences between live and desired states for
  # all resources (GK).
  #resource.customizations.ignoreDifferences.all: |
  #  managedFieldsManagers:
  #  - kube-controller-manager
  #  jsonPointers:
  #  - /spec/replicas

  #resource.customizations.health.certmanager.k8s.io-Certificate: |
  #  hs = {}
  #  if obj.status ~= nil then
  #    if obj.status.conditions ~= nil then
  #      for i, condition in ipairs(obj.status.conditions) do
  #        if condition.type == "Ready" and condition.status == "False" then
  #          hs.status = "Degraded"
  #          hs.message = condition.message
  #          return hs
  #        end
  #        if condition.type == "Ready" and condition.status == "True" then
  #          hs.status = "Healthy"
  #          hs.message = condition.message
  #          return hs
  #        end
  #      end
  #    end
  #  end
  #  hs.status = "Progressing"
  #  hs.message = "Waiting for certificate"
  #  return hs

  #resource.customizations.health.cert-manager.io_Certificate: |
  #  hs = {}
  #  if obj.status ~= nil then
  #    if obj.status.conditions ~= nil then
  #      for i, condition in ipairs(obj.status.conditions) do
  #        if condition.type == "Ready" and condition.status == "False" then
  #          hs.status = "Degraded"
  #          hs.message = condition.message
  #          return hs
  #        end
  #        if condition.type == "Ready" and condition.status == "True" then
  #          hs.status = "Healthy"
  #          hs.message = condition.message
  #          return hs
  #        end
  #      end
  #    end
  #  end
  #  hs.status = "Progressing"
  #  hs.message = "Waiting for certificate"
  #  return hs

  # List of Lua Scripts to introduce custom actions
  #resource.customizations.actions.apps_Deployment: |
  #  # Lua Script to indicate which custom actions are available on the resource
  #  discovery.lua: |
  #    actions = {}
  #    actions["restart"] = {}
  #    return actions
  #  definitions:
  #    - name: restart
  #      # Lua Script to modify the obj
  #      action.lua: |
  #        local os = require("os")
  #        if obj.spec.template.metadata == nil then
  #            obj.spec.template.metadata = {}
  #        end
  #        if obj.spec.template.metadata.annotations == nil then
  #            obj.spec.template.metadata.annotations = {}
  #        end
  #        obj.spec.template.metadata.annotations["kubectl.kubernetes.io/restartedAt"] = os.date("!%Y-%m-%dT%XZ")
  #        return obj

  # Configuration to completely ignore entire classes of resource group/kinds (optional).
  # Excluding high-volume resources improves performance and memory usage, and reduces load and
  # bandwidth to the Kubernetes API server.
  # These are globs, so a "*" will match all values.
  # If you omit groups/kinds/clusters then they will match all groups/kind/clusters.
  # NOTE: events.k8s.io and metrics.k8s.io are excluded by default
  #resource.exclusions: |
  #  - apiGroups:
  #    - repositories.stash.appscode.com
  #    kinds:
  #    - Snapshot
  #    clusters:
  #    - "*.local"

  # By default all resource group/kinds are included. The resource.inclusions setting allows customizing
  # list of included group/kinds.
  #resource.inclusions: |
  #  - apiGroups:
  #    - repositories.stash.appscode.com
  #    kinds:
  #    - Snapshot
  #    clusters:
  #    - "*.local"

  #resource.compareoptions: |
  #  # if ignoreAggregatedRoles set to true then differences caused by aggregated roles in RBAC resources are ignored.
  #  ignoreAggregatedRoles: true

    # disables status field diffing in specified resource types
    # 'crd' - CustomResourceDefinitions (default)
    # 'all' - all resources
    # 'none' - disabled
  #  ignoreResourceStatusField: crd

  # Configuration to add a config management plugin.
  #configManagementPlugins: |
  #  - name: kasane
  #    init:
  #      command: [kasane, update]
  #    generate:
  #      command: [kasane, show]